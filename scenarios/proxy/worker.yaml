---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Amazon EKS - Node Group definition with support for Cluster Autoscaler and Proxy'

Parameters:
  K8sVersion:
    Type: String
    Default: '11'
    Description: Kubernetes version 1.X
    AllowedValues:
    - '10'
    - '11'

  VpcId:
    Type: AWS::EC2::VPC::Id
  
  ClusterControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Control plane security group

  PrivateSubnets:
    Type: String
    Description: Multiple Subnet Ids separated by comma subnet-123,subnet-456

  ClusterCidr:
    Type: String
    Default: Multiple Cluster CIDR are separated by comma eg. 172.16.0.0/16,10.0.0.0/16

  ProxyUrl:
    Type: String

  ProxyPort:
    Type: Number
    Default: 3128

  ProxySecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Proxy security group

  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName

  NodeGPUSupport:
    Type: String
    Description: GPU support on worker nodes
    Default: nogpu
    AllowedValues:
    - nogpu
    - gpu

  NodeInstanceType:
    Description: EC2 instance type for the node instances
    Type: String
    Default: t2.medium
    AllowedValues:
    - t2.small
    - t2.medium
    - t2.large
    - t2.xlarge
    - t2.2xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - m5.large
    - m5.xlarge
    - m5.2xlarge
    - m5.4xlarge
    - m5.12xlarge
    - m5.24xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - c5.large
    - c5.xlarge
    - c5.2xlarge
    - c5.4xlarge
    - c5.9xlarge
    - c5.18xlarge
    - i3.large
    - i3.xlarge
    - i3.2xlarge
    - i3.4xlarge
    - i3.8xlarge
    - i3.16xlarge
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - r4.large
    - r4.xlarge
    - r4.2xlarge
    - r4.4xlarge
    - r4.8xlarge
    - r4.16xlarge
    - x1.16xlarge
    - x1.32xlarge
    - p2.xlarge
    - p2.8xlarge
    - p2.16xlarge
    - p3.2xlarge
    - p3.8xlarge
    - p3.16xlarge
    ConstraintDescription: Must be a valid EC2 instance type

  NodeAutoScalingGroupMinSize:
    Type: Number
    Description: Minimum size of Node Group ASG.
    Default: 1

  NodeAutoScalingGroupMaxSize:
    Type: Number
    Description: Maximum size of Node Group ASG.
    Default: 100 

  NodeVolumeSize:
    Type: Number
    Description: Node volume size
    Default: 20

  ClusterName:
    Description: The cluster name provided when the cluster was created. If it is incorrect, nodes will not be able to join the cluster.
    Type: String

  BootstrapArguments:
    Description: Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami
    Default: ""
    Type: String

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'EKS Cluster'
        Parameters:
        - ClusterName
        - ClusterControlPlaneSecurityGroup
        - K8sVersion

      - Label:
          default: 'VPC Configurations'
        Parameters:
        - VpcId
        - PrivateSubnets
        - ClusterCidr

      - Label:
          default: 'Proxy Configurations'
        Parameters:
        - ProxyUrl
        - ProxyPort
        - ProxySecurityGroup

      - Label:
          default: 'Worker Node Configuration'
        Parameters:
        - NodeAutoScalingGroupMinSize
        - NodeAutoScalingGroupMaxSize
        - NodeInstanceType
        - NodeGPUSupport
        - NodeVolumeSize
        - KeyName
        - BootstrapArguments

Resources:
  NodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref NodeInstanceRole

  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Policies:
      - PolicyName: cluster-autoscaler
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'autoscaling:DescribeAutoScalingGroups'
            - 'autoscaling:DescribeAutoScalingInstances'
            - 'autoscaling:DescribeLaunchConfigurations'
            - 'autoscaling:DescribeTags'
            - 'autoscaling:SetDesiredCapacity'
            - 'autoscaling:TerminateInstanceInAutoScalingGroup'
            Resource: '*'

  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all nodes in the cluster
      VpcId: !Ref VpcId
      Tags:
      - Key: !Sub "kubernetes.io/cluster/${ClusterName}"
        Value: 'owned'
        
  NodeSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow node to communicate with each other
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: '-1'
      FromPort: 0
      ToPort: 65535
  
  NodeSecurityGroupFromBastionIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow Bastion to SSH to worker node
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref ProxySecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22

  NodeSecurityGroupFromControlPlaneIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref ClusterControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  ControlPlaneEgressToNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow the cluster control plane to communicate with worker Kubelet and pods
      GroupId: !Ref ClusterControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  NodeSecurityGroupFromControlPlaneOn443Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref ClusterControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  ControlPlaneEgressToNodeSecurityGroupOn443:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
      GroupId: !Ref ClusterControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  ClusterControlPlaneSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      GroupId: !Ref ClusterControlPlaneSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443

  NodeGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: !Ref NodeAutoScalingGroupMinSize
      LaunchConfigurationName: !Ref NodeLaunchConfig
      MinSize: !Ref NodeAutoScalingGroupMinSize
      MaxSize: !Ref NodeAutoScalingGroupMaxSize
      VPCZoneIdentifier:
        Fn::Split:
        - ','
        - !Ref PrivateSubnets
      Tags:
      - Key: Name
        Value: !Sub "${ClusterName}-worker-node"
        PropagateAtLaunch: true
      - Key: !Sub 'kubernetes.io/cluster/${ClusterName}'
        Value: 'true'
        PropagateAtLaunch: true
      - Key: k8s.io/cluster-autoscaler/enabled
        Value: 'true'
        PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 5

  NodeLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: false
      IamInstanceProfile: !Ref NodeInstanceProfile
      ImageId: 
        Fn::FindInMap:
        - !Ref K8sVersion
        - !Ref AWS::Region
        - !Ref NodeGPUSupport
      InstanceType: !Ref NodeInstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
      - !Ref NodeSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref NodeVolumeSize
            VolumeType: gp2
            DeleteOnTermination: true
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            set -o xtrace

            # Create the docker systemd directory
            mkdir -p /etc/systemd/system/docker.service.d

            # Configure yum to use the proxy
            cat << EOF >> /etc/yum.conf
            proxy=http://${ProxyUrl}:${ProxyPort}
            EOF

            # Set the proxy for future processes, and use as an include file
            cat << EOF >> /etc/environment
            http_proxy=http://${ProxyUrl}:${ProxyPort}
            https_proxy=http://${ProxyUrl}:${ProxyPort}
            HTTP_PROXY=http://${ProxyUrl}:${ProxyPort}
            HTTPS_PROXY=http://${ProxyUrl}:${ProxyPort}
            no_proxy=${ClusterCidr},localhost,127.0.0.1,169.254.169.254,.internal
            NO_PROXY=${ClusterCidr},localhost,127.0.0.1,169.254.169.254,.internal
            EOF

            # Configure docker with the proxy
            cat << EOF >> /etc/systemd/system/docker.service.d/proxy.conf
            [Service]
            EnvironmentFile=/etc/environment
            EOF

            # Configure the kubelet with the proxy
            cat << EOF >> /etc/systemd/system/kubelet.service.d/proxy.conf
            [Service]
            EnvironmentFile=/etc/environment
            EOF
            
            # Pick up the docker systemd directory
            systemctl daemon-reload

            # Restart docker so it fetch the proxy parameters
            systemctl stop docker
            systemctl start docker

            # Set the proxy variables before running the bootstrap.sh script
            set -a
            source /etc/environment

            /etc/eks/bootstrap.sh ${ClusterName} ${BootstrapArguments}

Outputs:
  NodeInstanceRole:
    Description: The node instance role
    Value: !GetAtt NodeInstanceRole.Arn

Mappings:
  '11':
    us-west-2:
      nogpu: ami-0c28139856aaf9c3b
      gpu: ami-06045aa686f46dd58
    us-east-1:
      nogpu: ami-0eeeef929db40543c
      gpu: ami-0558da965e2fc68b0
    us-east-2:
      nogpu: ami-0484545fe7d3da96f
      gpu: ami-0c3afad2ea917168e
    eu-central-1:
      nogpu: ami-032ed5525d4df2de3
      gpu: ami-0939712219b80b525
    eu-north-1:
      nogpu: ami-0154b2479ba20f8bb
      gpu: ami-18bf3666
    eu-west-1:
      nogpu: ami-098fb7e9b507904e7
      gpu: ami-014969e8d07b2fc9f
    eu-west-2:
      nogpu: ami-0d69ab00cb41d6eda
      gpu: ami-0bb14a7e038ad534c
    eu-west-3:
      nogpu: ami-018ebb030cf6ae00b
      gpu: ami-0a3db0dbd972b38f2
    ap-northeast-1:
      nogpu: ami-07fdc9272ce5b0ce5
      gpu: ami-0880d3b662781d6d6
    ap-northeast-2:
      nogpu: ami-091e0e1906e653417
      gpu: ami-0c3db49d90afa0f1e
    ap-south-1:
      nogpu: ami-0b6f791fc54125a8a
      gpu: ami-00b37b9a91efc5fff
    ap-southeast-1:
      nogpu: ami-038d55c26bf01998f
      gpu: ami-0c903ead334faa6a3
    ap-southeast-2:
      nogpu: ami-0e07b5081bb77d540
      gpu: ami-02d7e0f064bd7d8e0
  '10':
    us-west-2:
      nogpu: ami-0e7ee8863c8536cce
      gpu: ami-02e0b615d7749e016
    us-east-1:
      nogpu: ami-09a7630ca9ee4ee22
      gpu: ami-00cce60e4c241de4c
    us-east-2:
      nogpu: ami-02a8a05e480e902e2
      gpu: ami-0bbfeb020c5ec10ee
    eu-central-1:
      nogpu: ami-0b8d223ce03e6fabc
      gpu: ami-0c1746c6d5d61b4d3
    eu-north-1:
      nogpu: ami-09be5053dbb1a515d
      gpu: ami-63aa231d
    eu-west-1:
      nogpu: ami-0103822d44fc52f97
      gpu: ami-08d23ed2de9320c90
    eu-west-2:
      nogpu: ami-017c4d847b606e125
      gpu: ami-0f136e808b9365a1c
    eu-west-3:
      nogpu: ami-0c7fc5c0784b58207
      gpu: ami-0b6c4fac3cdcc191d
    ap-northeast-1:
      nogpu: ami-0e831f9f650f2f8ab
      gpu: ami-061f5b653b1a98557
    ap-northeast-2:
      nogpu: ami-0378f1fac83cbf438
      gpu: ami-0a8159b97b9a7e078
    ap-south-1:
      nogpu: ami-0ac369c3b2206d2ea
      gpu: ami-03ba4c3cea82ce746
    ap-southeast-1:
      nogpu: ami-0fa3f3282eb89b795
      gpu: ami-02aa3e8ad27163456
    ap-southeast-2:
      nogpu: ami-01d0ab2e9506b8db0
      gpu: ami-0679fa5d74309eb79