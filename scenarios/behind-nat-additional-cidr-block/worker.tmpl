---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Amazon EKS - Node Group definition with support for Cluster Autoscaler'

Parameters:
  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Choose security group for worker node

  PrivateSubnets:
    Type: String
    Description: Define private subnets on VPC for proxy server, multiple Subnet Ids separated by comma subnet-123,subnet-456

  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName

  NodeGPUSupport:
    Type: String
    Description: Choose whether to enable GPU support on worker nodes or not
    Default: "false"
    AllowedValues:
    - "true"
    - "false"

  NodeInstanceType:
    Description: EC2 instance type for the node instances
    Type: String
    Default: t2.medium

  NodeAutoScalingGroupMinSize:
    Type: Number
    Description: Minimum size of Node Group ASG.
    Default: 1

  NodeAutoScalingGroupMaxSize:
    Type: Number
    Description: Maximum size of Node Group ASG.
    Default: 100 

  NodeVolumeSize:
    Type: Number
    Description: Node volume size
    Default: 20

  ClusterName:
    Description: The cluster name provided when the cluster was created. If it is incorrect, nodes will not be able to join the cluster.
    Type: String

  BootstrapArguments:
    Description: Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami
    Default: ""
    Type: String
  
  AmiID:
    Description: AUTO GENERATED BY MAKE FILE, DO NOT CHANGE
    Default: /aws/service/eks/optimized-ami/K8S_VERSION/IMAGE_TYPE/recommended/image_id
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'EKS Cluster Configurations'
        Parameters:
        - ClusterName

      - Label:
          default: 'VPC Configurations'
        Parameters:
        - PrivateSubnets

      - Label:
          default: 'Worker Node Configuration'
        Parameters:
        - NodeGPUSupport
        - NodeAutoScalingGroupMinSize
        - NodeAutoScalingGroupMaxSize
        - NodeInstanceType
        - NodeVolumeSize
        - BootstrapArguments
      
      - Label:
          default: "Worker Node Accessibility"
        Parameters:
        - KeyName
        - NodeSecurityGroup

Resources:
  NodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref NodeInstanceRole

  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - arn:aws:iam::aws:policy/AmazonElasticFileSystemReadOnlyAccess
      Policies:
      - PolicyName: cluster-autoscaler
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'autoscaling:DescribeAutoScalingGroups'
            - 'autoscaling:DescribeAutoScalingInstances'
            - 'autoscaling:DescribeLaunchConfigurations'
            - 'autoscaling:DescribeTags'
            - 'autoscaling:SetDesiredCapacity'
            - 'autoscaling:TerminateInstanceInAutoScalingGroup'
            Resource: '*'
      - PolicyName: cloudwatchlog-exporter
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'logs:CreateLogGroup'
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            Resource: '*'
      - PolicyName: kube2iam-assume
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'sts:AssumeRole'
            Resource: '*'

  NodeGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: !Ref NodeAutoScalingGroupMinSize
      LaunchConfigurationName: !Ref NodeLaunchConfig
      MinSize: !Ref NodeAutoScalingGroupMinSize
      MaxSize: !Ref NodeAutoScalingGroupMaxSize
      VPCZoneIdentifier:
        Fn::Split:
        - ','
        - !Ref PrivateSubnets
      Tags:
      - Key: Name
        Value: !Sub "${ClusterName}-node"
        PropagateAtLaunch: true
      - Key: !Sub 'kubernetes.io/cluster/${ClusterName}'
        Value: 'true'
        PropagateAtLaunch: true
      - Key: k8s.io/cluster-autoscaler/enabled
        Value: 'true'
        PropagateAtLaunch: true
      - Key: auto-delete
        Value: "no"
        PropagateAtLaunch: true
      - Key: GPUSupport
        Value: !Ref NodeGPUSupport
        PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 5

  NodeLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: false
      IamInstanceProfile: !Ref NodeInstanceProfile
      ImageId: !Ref AmiID
      InstanceType: !Ref NodeInstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
      - !Ref NodeSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref NodeVolumeSize
            VolumeType: gp2
            DeleteOnTermination: true
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            set -o xtrace
            /etc/eks/bootstrap.sh ${ClusterName} ${BootstrapArguments}

            KUBELET_CONFIG=/etc/kubernetes/kubelet/kubelet-config.json
            CURRENT_DNS_SERVERS=`jq ".clusterDNS[]" $KUBELET_CONFIG`
            INTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
            
            ALL_DNS_IPS="\"$INTERNAL_IP\"";
            
            for host in $CURRENT_DNS_SERVERS; do
              ALL_DNS_IPS="$ALL_DNS_IPS,$host";
            done
            
            echo "$(jq ".clusterDNS=[$ALL_DNS_IPS]" $KUBELET_CONFIG)" > $KUBELET_CONFIG
            
            systemctl daemon-reload
            systemctl restart kubelet

            /opt/aws/bin/cfn-signal --exit-code $? \
                     --stack  ${AWS::StackName} \
                     --resource NodeGroup  \
                     --region ${AWS::Region}

Outputs:
  NodeInstanceRole:
    Description: The node instance role
    Value: !GetAtt NodeInstanceRole.Arn
